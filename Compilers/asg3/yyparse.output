Terminals unused in grammar

   ROOT
   NUMBER
   STR
   TYPEID
   TYPE
   FIELD
   INDEX
   BINOP
   BASETYPE
   BLOCK
   IFELSE
   VARDECL
   FUNCTION
   VARIABLE
   CONSTANT
   CALL


Grammar

    0 $accept: program $end

    1 program: program structdef
    2        | program function
    3        | program statement
    4        | program error '}'
    5        | program error ';'
    6        | /* empty */

    7 structdef: STRUCT IDENT '{' structdecl '}'
    8          | STRUCT IDENT '{' '}'

    9 structdecl: structdecl decl ';'
   10           | decl ';'

   11 decl: type IDENT

   12 type: basetype ARRAY
   13     | basetype

   14 basetype: VOID
   15         | BOOL
   16         | CHAR
   17         | INT
   18         | STRING
   19         | IDENT

   20 function: decl '(' functdecl ')' block
   21         | decl '(' ')' block

   22 functdecl: decl
   23          | functdecl ',' decl

   24 block: '{' blockstate '}'
   25      | '{' '}'
   26      | ';'

   27 blockstate: blockstate statement
   28           | statement

   29 statement: block
   30          | vardecl
   31          | while
   32          | ifelse
   33          | return
   34          | expr ';'

   35 vardecl: type IDENT '=' expr ';'

   36 while: WHILE '(' expr ')' statement

   37 ifelse: IF '(' expr ')' statement
   38       | IF '(' expr ')' statement ELSE statement

   39 return: RETURN expr ';'
   40       | RETURN ';'

   41 expr: binop
   42     | unop
   43     | allocator
   44     | call
   45     | '(' expr ')'
   46     | variable
   47     | constant

   48 binop: expr '=' expr
   49      | expr EQEQ expr
   50      | expr NOTEQ expr
   51      | expr '<' expr
   52      | expr LESSEQ expr
   53      | expr '>' expr
   54      | expr GREATEQ expr
   55      | expr '+' expr
   56      | expr '-' expr
   57      | expr '*' expr
   58      | expr '%' expr
   59      | expr '/' expr

   60 unop: '+' expr
   61     | '-' expr
   62     | '!' expr
   63     | ORD expr
   64     | CHR expr

   65 allocator: NEW basetype '(' ')'
   66          | NEW basetype '(' expr ')'
   67          | NEW basetype '[' expr ']'

   68 variable: IDENT
   69         | expr '[' expr ']'
   70         | expr '.' IDENT

   71 call: callexpr ')'
   72     | IDENT '(' ')'

   73 callexpr: callexpr ',' expr
   74         | IDENT '(' expr

   75 constant: INTEGER
   76         | CHARCONST
   77         | STRINGCONST
   78         | FALSE
   79         | TRUE
   80         | NUL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 62
'%' (37) 58
'(' (40) 20 21 36 37 38 45 65 66 72 74
')' (41) 20 21 36 37 38 45 65 66 71 72
'*' (42) 57
'+' (43) 55 60
',' (44) 23 73
'-' (45) 56 61
'.' (46) 70
'/' (47) 59
';' (59) 5 9 10 26 34 35 39 40
'<' (60) 51
'=' (61) 35 48
'>' (62) 53
'[' (91) 67 69
']' (93) 67 69
'{' (123) 7 8 24 25
'}' (125) 4 7 8 24 25
error (256) 4 5
ROOT (258)
IDENT (259) 7 8 11 19 35 68 70 72 74
INTEGER (260) 75
STRINGCONST (261) 77
CHARCONST (262) 76
NUMBER (263)
CHAR (264) 16
STR (265)
VOID (266) 14
BOOL (267) 15
INT (268) 17
STRING (269) 18
STRUCT (270) 7 8
IF (271) 37 38
ELSE (272) 38
WHILE (273) 36
RETURN (274) 39 40
NEW (275) 65 66 67
FALSE (276) 78
TRUE (277) 79
NUL (278) 80
ORD (279) 63
CHR (280) 64
EQEQ (281) 49
ARRAY (282) 12
NOTEQ (283) 50
LESSEQ (284) 52
GREATEQ (285) 54
TYPEID (286)
TYPE (287)
FIELD (288)
INDEX (289)
BINOP (290)
BASETYPE (291)
BLOCK (292)
IFELSE (293)
VARDECL (294)
POS (295)
NEG (296)
FUNCTION (297)
VARIABLE (298)
CONSTANT (299)
CALL (300)
t (301)
e (302)


Nonterminals, with rules where they appear

$accept (66)
    on left: 0
program (67)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
structdef (68)
    on left: 7 8, on right: 1
structdecl (69)
    on left: 9 10, on right: 7 9
decl (70)
    on left: 11, on right: 9 10 20 21 22 23
type (71)
    on left: 12 13, on right: 11 35
basetype (72)
    on left: 14 15 16 17 18 19, on right: 12 13 65 66 67
function (73)
    on left: 20 21, on right: 2
functdecl (74)
    on left: 22 23, on right: 20 23
block (75)
    on left: 24 25 26, on right: 20 21 29
blockstate (76)
    on left: 27 28, on right: 24 27
statement (77)
    on left: 29 30 31 32 33 34, on right: 3 27 28 36 37 38
vardecl (78)
    on left: 35, on right: 30
while (79)
    on left: 36, on right: 31
ifelse (80)
    on left: 37 38, on right: 32
return (81)
    on left: 39 40, on right: 33
expr (82)
    on left: 41 42 43 44 45 46 47, on right: 34 35 36 37 38 39 45 48
    49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 69 70 73
    74
binop (83)
    on left: 48 49 50 51 52 53 54 55 56 57 58 59, on right: 41
unop (84)
    on left: 60 61 62 63 64, on right: 42
allocator (85)
    on left: 65 66 67, on right: 43
variable (86)
    on left: 68 69 70, on right: 46
call (87)
    on left: 71 72, on right: 44
callexpr (88)
    on left: 73 74, on right: 71 73
constant (89)
    on left: 75 76 77 78 79 80, on right: 47


state 0

    0 $accept: . program $end

    $default  reduce using rule 6 (program)

    program  go to state 1


state 1

    0 $accept: program . $end
    1 program: program . structdef
    2        | program . function
    3        | program . statement
    4        | program . error '}'
    5        | program . error ';'

    $end         shift, and go to state 2
    error        shift, and go to state 3
    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    STRUCT       shift, and go to state 13
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    structdef  go to state 29
    decl       go to state 30
    type       go to state 31
    basetype   go to state 32
    function   go to state 33
    block      go to state 34
    statement  go to state 35
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 2

    0 $accept: program $end .

    $default  accept


state 3

    4 program: program error . '}'
    5        | program error . ';'

    '}'  shift, and go to state 48
    ';'  shift, and go to state 49


state 4

   19 basetype: IDENT .
   68 variable: IDENT .
   72 call: IDENT . '(' ')'
   74 callexpr: IDENT . '(' expr

    '('  shift, and go to state 50

    IDENT     reduce using rule 19 (basetype)
    ARRAY     reduce using rule 19 (basetype)
    $default  reduce using rule 68 (variable)


state 5

   75 constant: INTEGER .

    $default  reduce using rule 75 (constant)


state 6

   77 constant: STRINGCONST .

    $default  reduce using rule 77 (constant)


state 7

   76 constant: CHARCONST .

    $default  reduce using rule 76 (constant)


state 8

   16 basetype: CHAR .

    $default  reduce using rule 16 (basetype)


state 9

   14 basetype: VOID .

    $default  reduce using rule 14 (basetype)


state 10

   15 basetype: BOOL .

    $default  reduce using rule 15 (basetype)


state 11

   17 basetype: INT .

    $default  reduce using rule 17 (basetype)


state 12

   18 basetype: STRING .

    $default  reduce using rule 18 (basetype)


state 13

    7 structdef: STRUCT . IDENT '{' structdecl '}'
    8          | STRUCT . IDENT '{' '}'

    IDENT  shift, and go to state 51


state 14

   37 ifelse: IF . '(' expr ')' statement
   38       | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 52


state 15

   36 while: WHILE . '(' expr ')' statement

    '('  shift, and go to state 53


state 16

   39 return: RETURN . expr ';'
   40       | RETURN . ';'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    ';'          shift, and go to state 55
    '('          shift, and go to state 28

    expr       go to state 56
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 17

   65 allocator: NEW . basetype '(' ')'
   66          | NEW . basetype '(' expr ')'
   67          | NEW . basetype '[' expr ']'

    IDENT   shift, and go to state 57
    CHAR    shift, and go to state 8
    VOID    shift, and go to state 9
    BOOL    shift, and go to state 10
    INT     shift, and go to state 11
    STRING  shift, and go to state 12

    basetype  go to state 58


state 18

   78 constant: FALSE .

    $default  reduce using rule 78 (constant)


state 19

   79 constant: TRUE .

    $default  reduce using rule 79 (constant)


state 20

   80 constant: NUL .

    $default  reduce using rule 80 (constant)


state 21

   63 unop: ORD . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 59
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 22

   64 unop: CHR . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 60
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 23

   60 unop: '+' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 61
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 24

   61 unop: '-' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 62
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 25

   62 unop: '!' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 63
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 26

   26 block: ';' .

    $default  reduce using rule 26 (block)


state 27

   24 block: '{' . blockstate '}'
   25      | '{' . '}'

    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '}'          shift, and go to state 64
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    type        go to state 65
    basetype    go to state 32
    block       go to state 34
    blockstate  go to state 66
    statement   go to state 67
    vardecl     go to state 36
    while       go to state 37
    ifelse      go to state 38
    return      go to state 39
    expr        go to state 40
    binop       go to state 41
    unop        go to state 42
    allocator   go to state 43
    variable    go to state 44
    call        go to state 45
    callexpr    go to state 46
    constant    go to state 47


state 28

   45 expr: '(' . expr ')'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 68
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 29

    1 program: program structdef .

    $default  reduce using rule 1 (program)


state 30

   20 function: decl . '(' functdecl ')' block
   21         | decl . '(' ')' block

    '('  shift, and go to state 69


state 31

   11 decl: type . IDENT
   35 vardecl: type . IDENT '=' expr ';'

    IDENT  shift, and go to state 70


state 32

   12 type: basetype . ARRAY
   13     | basetype .

    ARRAY  shift, and go to state 71

    $default  reduce using rule 13 (type)


state 33

    2 program: program function .

    $default  reduce using rule 2 (program)


state 34

   29 statement: block .

    $default  reduce using rule 29 (statement)


state 35

    3 program: program statement .

    $default  reduce using rule 3 (program)


state 36

   30 statement: vardecl .

    $default  reduce using rule 30 (statement)


state 37

   31 statement: while .

    $default  reduce using rule 31 (statement)


state 38

   32 statement: ifelse .

    $default  reduce using rule 32 (statement)


state 39

   33 statement: return .

    $default  reduce using rule 33 (statement)


state 40

   34 statement: expr . ';'
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ';'      shift, and go to state 86


state 41

   41 expr: binop .

    $default  reduce using rule 41 (expr)


state 42

   42 expr: unop .

    $default  reduce using rule 42 (expr)


state 43

   43 expr: allocator .

    $default  reduce using rule 43 (expr)


state 44

   46 expr: variable .

    $default  reduce using rule 46 (expr)


state 45

   44 expr: call .

    $default  reduce using rule 44 (expr)


state 46

   71 call: callexpr . ')'
   73 callexpr: callexpr . ',' expr

    ')'  shift, and go to state 87
    ','  shift, and go to state 88


state 47

   47 expr: constant .

    $default  reduce using rule 47 (expr)


state 48

    4 program: program error '}' .

    $default  reduce using rule 4 (program)


state 49

    5 program: program error ';' .

    $default  reduce using rule 5 (program)


state 50

   72 call: IDENT '(' . ')'
   74 callexpr: IDENT '(' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28
    ')'          shift, and go to state 89

    expr       go to state 90
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 51

    7 structdef: STRUCT IDENT . '{' structdecl '}'
    8          | STRUCT IDENT . '{' '}'

    '{'  shift, and go to state 91


state 52

   37 ifelse: IF '(' . expr ')' statement
   38       | IF '(' . expr ')' statement ELSE statement

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 92
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 53

   36 while: WHILE '(' . expr ')' statement

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 93
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 54

   68 variable: IDENT .
   72 call: IDENT . '(' ')'
   74 callexpr: IDENT . '(' expr

    '('  shift, and go to state 50

    $default  reduce using rule 68 (variable)


state 55

   40 return: RETURN ';' .

    $default  reduce using rule 40 (return)


state 56

   39 return: RETURN expr . ';'
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ';'      shift, and go to state 94


state 57

   19 basetype: IDENT .

    $default  reduce using rule 19 (basetype)


state 58

   65 allocator: NEW basetype . '(' ')'
   66          | NEW basetype . '(' expr ')'
   67          | NEW basetype . '[' expr ']'

    '['  shift, and go to state 95
    '('  shift, and go to state 96


state 59

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   63 unop: ORD expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 63 (unop)


state 60

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   64 unop: CHR expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 64 (unop)


state 61

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   60 unop: '+' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 60 (unop)


state 62

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   61 unop: '-' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 61 (unop)


state 63

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   62 unop: '!' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 62 (unop)


state 64

   25 block: '{' '}' .

    $default  reduce using rule 25 (block)


state 65

   35 vardecl: type . IDENT '=' expr ';'

    IDENT  shift, and go to state 97


state 66

   24 block: '{' blockstate . '}'
   27 blockstate: blockstate . statement

    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '}'          shift, and go to state 98
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    type       go to state 65
    basetype   go to state 32
    block      go to state 34
    statement  go to state 99
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 67

   28 blockstate: statement .

    $default  reduce using rule 28 (blockstate)


state 68

   45 expr: '(' expr . ')'
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ')'      shift, and go to state 100


state 69

   20 function: decl '(' . functdecl ')' block
   21         | decl '(' . ')' block

    IDENT   shift, and go to state 57
    CHAR    shift, and go to state 8
    VOID    shift, and go to state 9
    BOOL    shift, and go to state 10
    INT     shift, and go to state 11
    STRING  shift, and go to state 12
    ')'     shift, and go to state 101

    decl       go to state 102
    type       go to state 103
    basetype   go to state 32
    functdecl  go to state 104


state 70

   11 decl: type IDENT .
   35 vardecl: type IDENT . '=' expr ';'

    '='  shift, and go to state 105

    $default  reduce using rule 11 (decl)


state 71

   12 type: basetype ARRAY .

    $default  reduce using rule 12 (type)


state 72

   49 binop: expr EQEQ . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 106
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 73

   50 binop: expr NOTEQ . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 107
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 74

   52 binop: expr LESSEQ . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 108
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 75

   54 binop: expr GREATEQ . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 109
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 76

   48 binop: expr '=' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 110
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 77

   51 binop: expr '<' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 111
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 78

   53 binop: expr '>' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 112
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 79

   55 binop: expr '+' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 113
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 80

   56 binop: expr '-' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 114
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 81

   57 binop: expr '*' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 115
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 82

   59 binop: expr '/' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 116
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 83

   58 binop: expr '%' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 117
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 84

   69 variable: expr '[' . expr ']'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 118
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 85

   70 variable: expr '.' . IDENT

    IDENT  shift, and go to state 119


state 86

   34 statement: expr ';' .

    $default  reduce using rule 34 (statement)


state 87

   71 call: callexpr ')' .

    $default  reduce using rule 71 (call)


state 88

   73 callexpr: callexpr ',' . expr

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 120
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 89

   72 call: IDENT '(' ')' .

    $default  reduce using rule 72 (call)


state 90

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT
   74 callexpr: IDENT '(' expr .

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 74 (callexpr)


state 91

    7 structdef: STRUCT IDENT '{' . structdecl '}'
    8          | STRUCT IDENT '{' . '}'

    IDENT   shift, and go to state 57
    CHAR    shift, and go to state 8
    VOID    shift, and go to state 9
    BOOL    shift, and go to state 10
    INT     shift, and go to state 11
    STRING  shift, and go to state 12
    '}'     shift, and go to state 121

    structdecl  go to state 122
    decl        go to state 123
    type        go to state 103
    basetype    go to state 32


state 92

   37 ifelse: IF '(' expr . ')' statement
   38       | IF '(' expr . ')' statement ELSE statement
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ')'      shift, and go to state 124


state 93

   36 while: WHILE '(' expr . ')' statement
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ')'      shift, and go to state 125


state 94

   39 return: RETURN expr ';' .

    $default  reduce using rule 39 (return)


state 95

   67 allocator: NEW basetype '[' . expr ']'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 126
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 96

   65 allocator: NEW basetype '(' . ')'
   66          | NEW basetype '(' . expr ')'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28
    ')'          shift, and go to state 127

    expr       go to state 128
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 97

   35 vardecl: type IDENT . '=' expr ';'

    '='  shift, and go to state 105


state 98

   24 block: '{' blockstate '}' .

    $default  reduce using rule 24 (block)


state 99

   27 blockstate: blockstate statement .

    $default  reduce using rule 27 (blockstate)


state 100

   45 expr: '(' expr ')' .

    $default  reduce using rule 45 (expr)


state 101

   21 function: decl '(' ')' . block

    ';'  shift, and go to state 26
    '{'  shift, and go to state 27

    block  go to state 129


state 102

   22 functdecl: decl .

    $default  reduce using rule 22 (functdecl)


state 103

   11 decl: type . IDENT

    IDENT  shift, and go to state 130


state 104

   20 function: decl '(' functdecl . ')' block
   23 functdecl: functdecl . ',' decl

    ')'  shift, and go to state 131
    ','  shift, and go to state 132


state 105

   35 vardecl: type IDENT '=' . expr ';'

    IDENT        shift, and go to state 54
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    '('          shift, and go to state 28

    expr       go to state 133
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 106

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   49      | expr EQEQ expr .
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 49 (binop)


state 107

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   50      | expr NOTEQ expr .
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 50 (binop)


state 108

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   52      | expr LESSEQ expr .
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 52 (binop)


state 109

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   54      | expr GREATEQ expr .
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 54 (binop)


state 110

   48 binop: expr . '=' expr
   48      | expr '=' expr .
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 48 (binop)


state 111

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   51      | expr '<' expr .
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 51 (binop)


state 112

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   53      | expr '>' expr .
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 53 (binop)


state 113

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   55      | expr '+' expr .
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 55 (binop)


state 114

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   56      | expr '-' expr .
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '*'  shift, and go to state 81
    '/'  shift, and go to state 82
    '%'  shift, and go to state 83
    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 56 (binop)


state 115

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   57      | expr '*' expr .
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 57 (binop)


state 116

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   59      | expr '/' expr .
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 59 (binop)


state 117

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   58      | expr '%' expr .
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    '['  shift, and go to state 84
    '.'  shift, and go to state 85

    $default  reduce using rule 58 (binop)


state 118

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   69         | expr '[' expr . ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ']'      shift, and go to state 134


state 119

   70 variable: expr '.' IDENT .

    $default  reduce using rule 70 (variable)


state 120

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT
   73 callexpr: callexpr ',' expr .

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85

    $default  reduce using rule 73 (callexpr)


state 121

    8 structdef: STRUCT IDENT '{' '}' .

    $default  reduce using rule 8 (structdef)


state 122

    7 structdef: STRUCT IDENT '{' structdecl . '}'
    9 structdecl: structdecl . decl ';'

    IDENT   shift, and go to state 57
    CHAR    shift, and go to state 8
    VOID    shift, and go to state 9
    BOOL    shift, and go to state 10
    INT     shift, and go to state 11
    STRING  shift, and go to state 12
    '}'     shift, and go to state 135

    decl      go to state 136
    type      go to state 103
    basetype  go to state 32


state 123

   10 structdecl: decl . ';'

    ';'  shift, and go to state 137


state 124

   37 ifelse: IF '(' expr ')' . statement
   38       | IF '(' expr ')' . statement ELSE statement

    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    type       go to state 65
    basetype   go to state 32
    block      go to state 34
    statement  go to state 138
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 125

   36 while: WHILE '(' expr ')' . statement

    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    type       go to state 65
    basetype   go to state 32
    block      go to state 34
    statement  go to state 139
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 126

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   67 allocator: NEW basetype '[' expr . ']'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ']'      shift, and go to state 140


state 127

   65 allocator: NEW basetype '(' ')' .

    $default  reduce using rule 65 (allocator)


state 128

   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   66 allocator: NEW basetype '(' expr . ')'
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ')'      shift, and go to state 141


state 129

   21 function: decl '(' ')' block .

    $default  reduce using rule 21 (function)


state 130

   11 decl: type IDENT .

    $default  reduce using rule 11 (decl)


state 131

   20 function: decl '(' functdecl ')' . block

    ';'  shift, and go to state 26
    '{'  shift, and go to state 27

    block  go to state 142


state 132

   23 functdecl: functdecl ',' . decl

    IDENT   shift, and go to state 57
    CHAR    shift, and go to state 8
    VOID    shift, and go to state 9
    BOOL    shift, and go to state 10
    INT     shift, and go to state 11
    STRING  shift, and go to state 12

    decl      go to state 143
    type      go to state 103
    basetype  go to state 32


state 133

   35 vardecl: type IDENT '=' expr . ';'
   48 binop: expr . '=' expr
   49      | expr . EQEQ expr
   50      | expr . NOTEQ expr
   51      | expr . '<' expr
   52      | expr . LESSEQ expr
   53      | expr . '>' expr
   54      | expr . GREATEQ expr
   55      | expr . '+' expr
   56      | expr . '-' expr
   57      | expr . '*' expr
   58      | expr . '%' expr
   59      | expr . '/' expr
   69 variable: expr . '[' expr ']'
   70         | expr . '.' IDENT

    EQEQ     shift, and go to state 72
    NOTEQ    shift, and go to state 73
    LESSEQ   shift, and go to state 74
    GREATEQ  shift, and go to state 75
    '='      shift, and go to state 76
    '<'      shift, and go to state 77
    '>'      shift, and go to state 78
    '+'      shift, and go to state 79
    '-'      shift, and go to state 80
    '*'      shift, and go to state 81
    '/'      shift, and go to state 82
    '%'      shift, and go to state 83
    '['      shift, and go to state 84
    '.'      shift, and go to state 85
    ';'      shift, and go to state 144


state 134

   69 variable: expr '[' expr ']' .

    $default  reduce using rule 69 (variable)


state 135

    7 structdef: STRUCT IDENT '{' structdecl '}' .

    $default  reduce using rule 7 (structdef)


state 136

    9 structdecl: structdecl decl . ';'

    ';'  shift, and go to state 145


state 137

   10 structdecl: decl ';' .

    $default  reduce using rule 10 (structdecl)


state 138

   37 ifelse: IF '(' expr ')' statement .
   38       | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 146

    $default  reduce using rule 37 (ifelse)


state 139

   36 while: WHILE '(' expr ')' statement .

    $default  reduce using rule 36 (while)


state 140

   67 allocator: NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


state 141

   66 allocator: NEW basetype '(' expr ')' .

    $default  reduce using rule 66 (allocator)


state 142

   20 function: decl '(' functdecl ')' block .

    $default  reduce using rule 20 (function)


state 143

   23 functdecl: functdecl ',' decl .

    $default  reduce using rule 23 (functdecl)


state 144

   35 vardecl: type IDENT '=' expr ';' .

    $default  reduce using rule 35 (vardecl)


state 145

    9 structdecl: structdecl decl ';' .

    $default  reduce using rule 9 (structdecl)


state 146

   38 ifelse: IF '(' expr ')' statement ELSE . statement

    IDENT        shift, and go to state 4
    INTEGER      shift, and go to state 5
    STRINGCONST  shift, and go to state 6
    CHARCONST    shift, and go to state 7
    CHAR         shift, and go to state 8
    VOID         shift, and go to state 9
    BOOL         shift, and go to state 10
    INT          shift, and go to state 11
    STRING       shift, and go to state 12
    IF           shift, and go to state 14
    WHILE        shift, and go to state 15
    RETURN       shift, and go to state 16
    NEW          shift, and go to state 17
    FALSE        shift, and go to state 18
    TRUE         shift, and go to state 19
    NUL          shift, and go to state 20
    ORD          shift, and go to state 21
    CHR          shift, and go to state 22
    '+'          shift, and go to state 23
    '-'          shift, and go to state 24
    '!'          shift, and go to state 25
    ';'          shift, and go to state 26
    '{'          shift, and go to state 27
    '('          shift, and go to state 28

    type       go to state 65
    basetype   go to state 32
    block      go to state 34
    statement  go to state 147
    vardecl    go to state 36
    while      go to state 37
    ifelse     go to state 38
    return     go to state 39
    expr       go to state 40
    binop      go to state 41
    unop       go to state 42
    allocator  go to state 43
    variable   go to state 44
    call       go to state 45
    callexpr   go to state 46
    constant   go to state 47


state 147

   38 ifelse: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 38 (ifelse)
