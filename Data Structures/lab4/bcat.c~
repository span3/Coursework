// $Id: bcat.c,v 1.1 2011-01-25 19:30:06-08 - - $
//
// NAME
// bcat - concatenate and display files
//
// SYNOPSIS
// bcat [filename...]
//
// DESCRIPTION
// The ‘bcat’ utility reads each file in sequence and writes  it
// to stdout. If any filename is given as the single character
// ‘-’, stdin is read at that point. If no filenames are given
// then stdin is read as the only file.
//

#include <errno.h>
#include <libgen.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

//
// cat -
// Copy the contents of an already-opened file to stdout.
//

void catfile (FILE *input, int option) {
  switch (option) {
    case 'm' : printf("\n
  }
  for (;;) {
    int byte = getc (input);
    if (byte == EOF) break;
    (void) putchar (byte);
  };
}

//
// main -
// Loop over files, if any, and cat each of them to stdout.
// Print error messages if appropriate.
//

int main (int argc, char **argv) { 
  int exit_status = EXIT_SUCCESS;
  char *progname = basename (argv[0]);
  for (;;) {
    int option = getopt (argc, argv, "mnsv");
    if (option == EOF) break;
    catfile (argv, option);
  }
  if (argc == 1) {
    catfile (stdin);
  }else{
    for (int argi = 1; argi < argc; ++argi) {
      if (strcmp (argv[argi], "-") == 0) {
	catfile (stdin);
      }else{
	FILE *input = fopen (argv[argi], "r");
	if (input == NULL) {
	  fflush (NULL);
	  fprintf (stderr, "%s: %s: %s\n", progname,
		   argv[argi], strerror (errno));
	  fflush (NULL);
	  exit_status = EXIT_FAILURE;
	}else{
	  catfile (input);
	  fclose (input);
	};
      };
    };
  };
  return exit_status;
}

/*
*****************************************************************

Whenever a man page is referenced, read it online. For example,
when we refer to ‘stdio(3c)’, you can read it with ‘‘man -s 3C
stdio’’.
As described in stdio(3c), there are three FILE* handles that
are always opened when a program starts: ‘stdin’, ‘stdout’, and
'stderr’. These are, respectively, the standard input, standard
output, and standard error. Normal output is written to stdout,
while error messages are written to stderr.

The usual format of an error message is something like:
. progname: object_or_function: reason
The reason a system call has failed is given in the external
variable ‘errno’. This can be translated into English via
strerror(3c).

‘fopen(3c)’ opens a file and returns a pointer to a ‘FILE’,
given a filename. ‘fclose(3c)’ closes that file, given a
FILE*. ‘putchar(3c)’ writes one byte to stdout. ‘getc(3c)’
reads one byte from the FILE* given as an argument and returns
an int containing the character, if one exists. If not, returns
EOF (-1). Note that end of line is signalled by ’\n’. To
signal EOF from a Unix terminal, type Control/D as the first
character on a line.

Strings are represented as arrays of characters. Each string
ends with a null plug (’\0’). ‘strcmp(3c)’ compares two such
character strings and returns a number that is <, =, or > 0,
depending on the relationship. See Java’s compareTo function.

Some functions return values instead of void, but we often don’t
care what these values are, so we use the function in a
statement context. This causes lint(1) to complain: ‘‘function
returns value which is always ignored’’. So we explicitly cast
the results of these functions to (void) in order to suppress
this error. Alternately we could have use a drop-in macro to
replace them.

The call fflush (NULL) causes all opened FILE* handles to be
flushed. When a program writes data, it is buffered in memory
before being written to the disk. This causes immediate writing
instead of waiting until the buffer is full. We do this so that
anything written to stdout and stderr are properly interleaved.
:
 *****************************************************************
 */
