Script started on Wed 04 May 2011 03:10:36 PM PDT
private/cmps012b: No such file or directory.
[fcarril1@unix3 lab5]$ mk uninit.c
+ for CSOURCE in '$*'
+ cid + uninit.c
+ checksource uninit.c
+ lint -Xa -fd -m -u -x -errchk=%all uninit.c
(8) warning: variable may be used before set: foo
(10) warning: variable may be used before set: pointer

argument unused in function
    (6) argc in main
    (6) argv in main

function returns value which is always ignored
    printf          
++ echo uninit.c
++ sed 's/\.c$//'
+ EXECBIN=uninit
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
uninit.c:6: warning: unused parameter â€˜argcâ€™
uninit.c:6: warning: unused parameter â€˜argvâ€™
[fcarril1@unix3 lab5]$ c[Kvalgrind uninit
==10243== Memcheck, a memory error detector
==10243== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==10243== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
==10243== Command: uninit
==10243== 
==10243== Use of uninitialised value of size 8
==10243==    at 0x3BD5E419BD: _itoa_word (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E44E5A: vfprintf (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E4D3F9: printf (in /lib64/libc-2.5.so)
==10243==    by 0x4004E8: main (uninit.c:8)
==10243== 
==10243== Conditional jump or move depends on uninitialised value(s)
==10243==    at 0x3BD5E419C7: _itoa_word (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E44E5A: vfprintf (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E4D3F9: printf (in /lib64/libc-2.5.so)
==10243==    by 0x4004E8: main (uninit.c:8)
==10243== 
==10243== Conditional jump or move depends on uninitialised value(s)
==10243==    at 0x3BD5E44ED4: vfprintf (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E4D3F9: printf (in /lib64/libc-2.5.so)
==10243==    by 0x4004E8: main (uninit.c:8)
==10243== 
==10243== Conditional jump or move depends on uninitialised value(s)
==10243==    at 0x3BD5E4563F: vfprintf (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E4D3F9: printf (in /lib64/libc-2.5.so)
==10243==    by 0x4004E8: main (uninit.c:8)
==10243== 
==10243== Conditional jump or move depends on uninitialised value(s)
==10243==    at 0x3BD5E43B60: vfprintf (in /lib64/libc-2.5.so)
==10243==    by 0x3BD5E4D3F9: printf (in /lib64/libc-2.5.so)
==10243==    by 0x4004E8: main (uninit.c:8)
==10243== 
7
==10243== Use of uninitialised value of size 8
==10243==    at 0x4004ED: main (uninit.c:10)
==10243== 
==10243== Invalid read of size 4
==10243==    at 0x4004ED: main (uninit.c:10)
==10243==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==10243== 
==10243== 
==10243== Process terminating with default action of signal 11 (SIGSEGV)
==10243==  Access not within mapped region at address 0x0
==10243==    at 0x4004ED: main (uninit.c:10)
==10243==  If you believe this happened as a result of a stack
==10243==  overflow in your program's main thread (unlikely but
==10243==  possible), you can try to increase the size of the
==10243==  main thread stack using the --main-stacksize= flag.
==10243==  The main thread stack size used in this run was 10485760.
==10243== 
==10243== HEAP SUMMARY:
==10243==     in use at exit: 0 bytes in 0 blocks
==10243==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==10243== 
==10243== All heap blocks were freed -- no leaks are possible
==10243== 
==10243== For counts of detected and suppressed errors, rerun with: -v
==10243== Use --track-origins=yes to see where uninitialised values come from
==10243== ERROR SUMMARY: 7 errors from 7 contexts (suppressed: 4 from 4)
Segmentation fault
[fcarril1@unix3 lab5]$ echo $?
139
[fcarril1@unix3 lab5]$ pstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
[fcarril1@unix3 lab5]$ exit
exit

Script done on Wed 04 May 2011 03:11:21 PM PDT
