head	1.15;
access;
symbols;
locks;
comment	@ * @;


1.15
date	2011.05.20.05.32.16;	author -;	state -;
branches;
next	1.14;

1.14
date	2011.05.20.05.26.33;	author -;	state -;
branches;
next	1.13;

1.13
date	2011.05.20.05.25.50;	author -;	state -;
branches;
next	1.12;

1.12
date	2011.05.20.05.25.01;	author -;	state -;
branches;
next	1.11;

1.11
date	2011.05.20.05.21.49;	author -;	state -;
branches;
next	1.10;

1.10
date	2011.05.20.05.21.25;	author -;	state -;
branches;
next	1.9;

1.9
date	2011.05.20.05.21.01;	author -;	state -;
branches;
next	1.8;

1.8
date	2011.05.20.05.19.30;	author -;	state -;
branches;
next	1.7;

1.7
date	2011.05.20.05.19.09;	author -;	state -;
branches;
next	1.6;

1.6
date	2011.05.20.05.18.32;	author -;	state -;
branches;
next	1.5;

1.5
date	2011.05.20.05.18.05;	author -;	state -;
branches;
next	1.4;

1.4
date	2011.05.20.05.17.32;	author -;	state -;
branches;
next	1.3;

1.3
date	2011.05.20.05.16.43;	author -;	state -;
branches;
next	1.2;

1.2
date	2011.05.20.05.14.30;	author -;	state -;
branches;
next	1.1;

1.1
date	2011.05.20.05.03.43;	author -;	state -;
branches;
next	;


desc
@@


1.15
log
@-
@
text
@/* $Id: queue.c,v 1.14 2011-05-19 22:26:33-07 - - $ */

#include <assert.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "queue.h"

static char *queue_tag = "struct queue";
static char *queuenode_tag = "struct queuenode";

typedef struct queuenode *queuenode_ref;

struct queuenode {
   char *tag;
   queue_item_t item;
   queuenode_ref link;
};

struct queue {
   char *tag;
   queuenode_ref front;
   queuenode_ref rear;
};

queue_ref new_queue (void) {
   queue_ref new = malloc(sizeof(struct queue));
   new->tag = queue_tag;
   new->front = NULL;
   new->rear = NULL;
   assert (new != NULL);
   return new;
}

void free_queue (queue_ref queue) {
   assert (is_queue (queue));
   assert (isempty_queue (queue));
   memset (queue, 0, sizeof (struct queue));
   free (queue);
}

void insert_queue (queue_ref queue, queue_item_t item) {
   assert (is_queue (queue));
   queuenode_ref tmp = malloc(sizeof(struct queuenode));
   assert (tmp != NULL);
   tmp->item = item;
   tmp->tag = queuenode_tag;
   tmp->link = NULL;
   if (queue->front == NULL) queue->front = tmp;
   else queue->rear = tmp;
}

queue_item_t remove_queue (queue_ref queue) {
   assert (is_queue (queue));
   assert (! isempty_queue (queue));
   queue_item_t val = queue->front->item;
   queue->front = queue->front->link;
   return val;
}

bool isempty_queue (queue_ref queue) {
   assert (is_queue (queue));
   return queue->front == NULL;
}

bool is_queue (queue_ref queue) {
   return queue != NULL && queue->tag == queue_tag;
}


@


1.14
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.13 2011-05-19 22:25:50-07 - - $ */
d57 1
a57 2
   queuenode_ref curr = queue->front;
   queue_item_t val = curr->item;
@


1.13
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.12 2011-05-19 22:25:01-07 - - $ */
d28 1
a28 1
   queue new = malloc(sizeof(struct queue));
@


1.12
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.11 2011-05-19 22:21:49-07 - - $ */
d29 3
@


1.11
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.10 2011-05-19 22:21:25-07 - - $ */
d28 1
a28 1
   queuenode_ref new = malloc(sizeof(struct queuenode));
d30 1
a30 4
   new->tag = queue_tag;
   new->item = NULL;
   new->link = NULL;
   return NULL;
d45 1
@


1.10
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.9 2011-05-19 22:21:01-07 - - $ */
d56 1
a56 1
   queuenode_ref curr = queue->head;
d58 1
a58 1
   queue->head = queue->head->link;
@


1.9
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.8 2011-05-19 22:19:30-07 - - $ */
d58 1
a58 1
   head = head->link;
@


1.8
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.7 2011-05-19 22:19:09-07 - - $ */
d57 1
a57 1
   item_t val = curr->item;
@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.6 2011-05-19 22:18:32-07 - - $ */
d56 1
a56 1
   node_ref curr = queue->head;
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.5 2011-05-19 22:18:05-07 - - $ */
d56 2
a57 1
   item_t val = queue->head->item;
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.4 2011-05-19 22:17:32-07 - - $ */
d56 1
a56 1
   item_t val = head->item;
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.3 2011-05-19 22:16:43-07 - - $ */
d50 1
a50 1
   else rear->link = tmp;
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.2 2011-05-19 22:14:30-07 - - $ */
d49 1
a49 1
   if (front == NULL) front = tmp;
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.1 2011-05-19 22:03:43-07 - - $ */
d33 1
a33 1
   return new;
@


1.1
log
@-
@
text
@d1 1
a1 1
/* $Id: queue.c,v 1.1 2011-02-04 14:26:28-08 - - $ */
d33 1
a33 1
   return NULL;
@
